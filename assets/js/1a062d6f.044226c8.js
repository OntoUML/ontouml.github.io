(self.webpackChunkontouml_docs=self.webpackChunkontouml_docs||[]).push([[569],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return u},kt:function(){return d}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(t),d=o,f=c["".concat(s,".").concat(d)]||c[d]||m[d]||a;return t?r.createElement(f,i(i({ref:n},u),{},{components:t})):r.createElement(f,i({ref:n},u))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},2290:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return u},default:function(){return c}});var r=t(2122),o=t(9756),a=(t(7294),t(3905)),i=["components"],l={sidebar_position:1,hide_table_of_contents:!0},s="Introduction",p={unversionedId:"ontouml-server/intro",id:"ontouml-server/intro",isDocsHomePage:!1,title:"Introduction",description:"This project is a proof of concept of the OntoUML Server, a web API designed to exposed functionalities for OntoUML models (e.g., automatic syntax verification and model transformation).",source:"@site/docs/ontouml-server/intro.md",sourceDirName:"ontouml-server",slug:"/ontouml-server/intro",permalink:"/docs/ontouml-server/intro",editUrl:"https://github.com/OntoUML/ontouml.github.io/edit/main/docs/ontouml-server/intro.md",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,hide_table_of_contents:!0},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/docs/intro"},next:{title:"Installation",permalink:"/docs/ontouml-js/intro"}},u=[{value:"Services",id:"services",children:[]}],m={toc:u};function c(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"This project is a proof of concept of the OntoUML Server, a web API designed to exposed functionalities for OntoUML models (e.g., automatic syntax verification and model transformation)."),(0,a.kt)("h2",{id:"services"},"Services"),(0,a.kt)("p",null,"The OntoUML Sever is currently running at ",(0,a.kt)("a",{parentName:"p",href:"http://api.ontouml.org/v1/"},"http://api.ontouml.org/")," with the following services available:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"v1/verify"),": syntactical verification service for models in OntoUML 2. The request must contain the following characteristics:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"HTTP Method ",(0,a.kt)("strong",{parentName:"li"},"POST"),": the endpoint process ",(0,a.kt)("strong",{parentName:"li"},"POST")," requests;"),(0,a.kt)("li",{parentName:"ul"},"Content-Type Header: the ",(0,a.kt)("inlineCode",{parentName:"li"},"Content-Type")," must be ",(0,a.kt)("inlineCode",{parentName:"li"},"application/json")),(0,a.kt)("li",{parentName:"ul"},"Request Body: the request body must be a JSON object that instantiates ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/OntoUML/ontouml-schema"},(0,a.kt)("inlineCode",{parentName:"a"},"ontouml-schema")))))),(0,a.kt)("p",null,"The following snippet exemplifies a request for the syntactical verification service:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-HTTP"},'POST /v1/verify HTTP/1.1\nContent-Type: application/json\n\n{\n    "type": "Package",\n    "id": "qJdeWA6AUB0UtAWl",\n    "name": "serialization",\n    "description": null,\n    "contents": [\n        {\n            "type": "Class",\n            "id": "qJdeWA6AUB0UtAWm",\n            "name": "People",\n            "description": null,\n            "properties": null,\n            "literals": null,\n            "propertyAssignments": null,\n            "stereotypes": [\n                "kind"\n            ],\n            "isAbstract": false,\n            "isDerived": false\n        }\n    ],\n    "propertyAssignments": null\n}\n')),(0,a.kt)("p",null,"In successful requests, the server returns a status code ",(0,a.kt)("inlineCode",{parentName:"p"},"200 OK")," with a ",(0,a.kt)("inlineCode",{parentName:"p"},"Content-Type: application/json")," where the body an array of ",(0,a.kt)("inlineCode",{parentName:"p"},"VerificationIssue")," objects.\nEach ",(0,a.kt)("inlineCode",{parentName:"p"},"VerificationIssue")," object may have an array of ",(0,a.kt)("inlineCode",{parentName:"p"},"VerificationAlternative")," object that inform possible solutions for the container issue.\nWhen no issues are detected, an empty array is returned.\nThe following snippet present response for the previous request:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-HTTP"},'HTTP/1.1 200 OK\nContent-Type: application/json\n\n[\n  {\n    "code": "CLASS_PLURAL_NAME",\n    "title": "Classes should not have plural names.",\n    "description": "The class People should have its name in the singular form (Person).",\n    "source": {\n      "type": "Class",\n      "id": "qJdeWA6AUB0UtAWm",\n      "name": "People",\n      "description": null,\n      "properties": null,\n      "literals": null,\n      "propertyAssignments": null,\n      "stereotypes": [\n        "kind"\n      ],\n      "isAbstract": false,\n      "isDerived": false\n    },\n    "context": null,\n    "severity": "WARNING",\n    "alternatives": [\n      {\n        "code": "ONTOUML_CLASS_NAME_TO_PLURAL",\n        "title": "Change name to singular form.",\n        "description": "Change name from People to Person.",\n        "elements": null\n      }\n    ]\n  }\n]\n')),(0,a.kt)("p",null,"The format of ",(0,a.kt)("inlineCode",{parentName:"p"},"VerificationIssue")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"VerificationAlternative")," objects is defined by the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/OntoUML/ontouml-schema"},(0,a.kt)("inlineCode",{parentName:"a"},"ontouml-js"))," project."),(0,a.kt)("p",null,"Unsuccessful requests may return one of the following responses:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Body not conforming to ",(0,a.kt)("inlineCode",{parentName:"strong"},"ontouml-schema")," serialization"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-HTTP"},'HTTP/1.1 400 Bad Request\nContent-Type: application/json\n\n{\n  "status": "400",\n  "message": "Invalid model input.",\n  "errors": [ ... ]\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Internal Server Error"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-HTTP"},"HTTP/1.1 500 Internal Server Error\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"v1/transform/gufo"),": transformation service of OntoUML 2 models into ",(0,a.kt)("a",{parentName:"p",href:"http://purl.org/nemo/doc/gufo"},"gUFO")," ontologies. The request must contain the following characteristics:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"HTTP Method ",(0,a.kt)("strong",{parentName:"p"},"POST"),": the endpoint process ",(0,a.kt)("strong",{parentName:"p"},"POST")," requests")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Content-Type Header: the ",(0,a.kt)("inlineCode",{parentName:"p"},"Content-Type")," must be ",(0,a.kt)("inlineCode",{parentName:"p"},"application/json"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Request Body: the request body must be a JSON object that contains the following fields:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"options"),": a JSON object that contains: a ",(0,a.kt)("inlineCode",{parentName:"li"},"baseIRI")," string as the prefix for the ontology; a ",(0,a.kt)("inlineCode",{parentName:"li"},"uriFormatBy")," string that is either ",(0,a.kt)("inlineCode",{parentName:"li"},'"name"')," or ",(0,a.kt)("inlineCode",{parentName:"li"},'"id"')," inform the desired formatting; and a ",(0,a.kt)("inlineCode",{parentName:"li"},"format")," string that informs the desired syntax, i.e., either ",(0,a.kt)("inlineCode",{parentName:"li"},"N-Triples"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"N-Quad"),", or ",(0,a.kt)("inlineCode",{parentName:"li"},"Turtle")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"model"),": a JSON object that instantiates ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/OntoUML/ontouml-schema"},(0,a.kt)("inlineCode",{parentName:"a"},"ontouml-schema")))))))),(0,a.kt)("p",null,"The following snippet exemplifies a request for the transformation service to gUFO:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-HTTP"},'POST /v1/transform/gUFO HTTP/1.1\nContent-Type: application/json\n\n{\n    "options": {\n        "baseIRI": "https://example.com",\n        "format": "Turtle",\n        "uriFormatBy": "id"\n    },\n    "model": {\n        "type": "Package",\n        "id": "qJdeWA6AUB0UtAWl",\n        "name": "serialization",\n        "description": null,\n        "contents": [\n            {\n                "type": "Class",\n                "id": "qJdeWA6AUB0UtAWm",\n                "name": "Person",\n                "description": null,\n                "properties": null,\n                "literals": null,\n                "propertyAssignments": null,\n                "stereotypes": [\n                    "kind"\n                ],\n                "isAbstract": false,\n                "isDerived": false\n            }\n        ],\n        "propertyAssignments": null\n    }\n}\n')),(0,a.kt)("p",null,"In successful requests, the server returns a status code ",(0,a.kt)("inlineCode",{parentName:"p"},"200 OK")," with a ",(0,a.kt)("inlineCode",{parentName:"p"},"Content-Type")," corresponding to ",(0,a.kt)("a",{parentName:"p",href:"https://www.iana.org/assignments/media-types/media-types.xhtml#text"},"IANA Media Type")," of the specified ",(0,a.kt)("inlineCode",{parentName:"p"},"format")," option: ",(0,a.kt)("inlineCode",{parentName:"p"},"application/n-triples")," for ",(0,a.kt)("inlineCode",{parentName:"p"},'"format": "N-Triples"'),"; ",(0,a.kt)("inlineCode",{parentName:"p"},"application/n-quads")," for ",(0,a.kt)("inlineCode",{parentName:"p"},'"format": "N-Quads"'),"; and ",(0,a.kt)("inlineCode",{parentName:"p"},"text/turtle")," for ",(0,a.kt)("inlineCode",{parentName:"p"},'"format": "Turtle"'),".\nThe response body contains the output of the requested transformation.\nThe following snippet present response for the previous request:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-HTTP"},'HTTP/1.1 200 OK\nContent-Type: text/turtle\n\n@prefix : <https://example.com#>.\n@prefix gufo: <http://purl.org/nemo/gufo#>.\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.\n@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.\n@prefix owl: <http://www.w3.org/2002/07/owl#>.\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.\n\n<https://example.com> rdf:type owl:Ontology;\n    owl:imports gufo:.\n:qJdeWA6AUB0UtAWm rdf:type owl:Class, owl:NamedIndividual;\n    rdfs:label "Person";\n    rdfs:subClassOf gufo:FunctionalComplex;\n    rdf:type gufo:Kind.\n')),(0,a.kt)("p",null,"Unsuccessful requests may return one of the following responses:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Body does not conform to the request specification"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-HTTP"},'HTTP/1.1 400 Bad Request\nContent-Type: application/json\n\n{\n  "status": 400,\n  "message": "Malformed request"\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"model")," does not conform to ",(0,a.kt)("inlineCode",{parentName:"strong"},"ontouml-schema")," serialization"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-HTTP"},'HTTP/1.1 400 Bad Request\nContent-Type: application/json\n\n{\n  "status": "400",\n  "message": "Invalid model input.",\n  "errors": [ ... ]\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"model")," has issues of severity ",(0,a.kt)("inlineCode",{parentName:"strong"},"ERROR")," contains"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-HTTP"},'HTTP/1.1 400 Bad Request\nContent-Type: application/json\n\n{\n  "status": 400,\n  "message": "Unable to transform model containing errors",\n  "errors": [\n    {\n      "code": "CLASS_INVALID_ONTOUML_STEREOTYPE",\n      "title": "No valid OntoUML stereotype.",\n      "description": "The class Person must have a unique OntoUML stereotype.",\n      "source": {\n        "type": "Class",\n        "id": "qJdeWA6AUB0UtAWm",\n        "name": "Person",\n        "description": null,\n        "properties": null,\n        "literals": null,\n        "propertyAssignments": null,\n        "stereotypes": [\n          "invalid"\n        ],\n        "isAbstract": false,\n        "isDerived": false\n      },\n      "context": null,\n      "severity": "ERROR",\n      "alternatives": [\n        {\n          "code": "REPLACE_ONTOUML_CLASS_STEREOTYPE",\n          "title": "Replace element\'s stereotypes.",\n          "description": "Apply to Person a unique stereotype from the set {kind, quantity, collective, subkind, role, phase, category, mixin, roleMixin, phaseMixin, relator, mode, quality, type, event, historicalRole, datatype, enumeration}.",\n          "elements": null\n        }\n      ]\n    }\n  ]\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Internal Server Error"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-HTTP"},"HTTP/1.1 500 Internal Server Error\n")))}c.isMDXComponent=!0}}]);