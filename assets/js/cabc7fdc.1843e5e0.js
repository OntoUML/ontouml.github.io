(self.webpackChunkontouml_docs=self.webpackChunkontouml_docs||[]).push([[640],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return d},kt:function(){return p}});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),u=c(n),p=i,f=u["".concat(l,".").concat(p)]||u[p]||m[p]||r;return n?o.createElement(f,s(s({ref:t},d),{},{components:n})):o.createElement(f,s({ref:t},d))}));function p(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=u;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:i,s[1]=a;for(var c=2;c<r;c++)s[c]=n[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1775:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return a},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return d},default:function(){return u}});var o=n(2122),i=n(9756),r=(n(7294),n(3905)),s=["components"],a={sidebar_position:3,hide_table_of_contents:!0},l="Classes",c={unversionedId:"ontouml-js/modeling/classes",id:"ontouml-js/modeling/classes",isDocsHomePage:!1,title:"Classes",description:"Classes are the main elements in the application. They describe the structure of a system. Every class must have a name and a stereotype that classifies the element in terms of its identity. An identity principle is a sort of function we use to distinguish two individuals (i.e. instances of some specific class). Let\u2019s use the simplest example of all: the identity principle of sets. Two sets, A and B, are the same if, and only if, they have the same elements. Therefore, if A = {1,2} and B = {2,3} then A != B. So the identity of a set is defined by its members. Changing a member of a set changes the identity of the set.",source:"@site/docs/ontouml-js/modeling/classes.md",sourceDirName:"ontouml-js/modeling",slug:"/ontouml-js/modeling/classes",permalink:"/docs/ontouml-js/modeling/classes",editUrl:"https://github.com/OntoUML/ontouml.github.io/edit/main/docs/ontouml-js/modeling/classes.md",version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,hide_table_of_contents:!0},sidebar:"tutorialSidebar",previous:{title:"Packages",permalink:"/docs/ontouml-js/modeling/packages"},next:{title:"Relations",permalink:"/docs/ontouml-js/modeling/relations"}},d=[],m={toc:d};function u(e){var t=e.components,n=(0,i.Z)(e,s);return(0,r.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"classes"},"Classes"),(0,r.kt)("p",null,"Classes are the main elements in the application. They describe the structure of a system. Every class must have a name and a stereotype that classifies the element in terms of its identity. An identity principle is a sort of function we use to distinguish two individuals (i.e. instances of some specific class). Let\u2019s use the simplest example of all: the identity principle of sets. Two sets, A and B, are the same if, and only if, they have the same elements. Therefore, if A = {1,2} and B = {2,3} then A != B. So the identity of a set is defined by its members. Changing a member of a set changes the identity of the set."),(0,r.kt)("p",null,"Some classes have the characteristic of providing identity principles for their instances. They are stereotype as: \xabKind\xbb, \xabCollective\xbb, \xabQuantity\xbb, \xabRelator\xbb, \xabMode\xbb and \xabQuantity\xbb."),(0,r.kt)("p",null,"Some other classes don\u2019t provide identity principle for their instances, but they all share a common one. They are stereotyped as: \xabSubkind\xbb, \xabRole\xbb and \xabPhase\xbb."),(0,r.kt)("p",null,"Some other classes don\u2019t provide identity and their instances follow different identity principles. They are stereotyped as: \xabRoleMixin\xbb, \xabMixin\xbb and \xabCategory\xbb."),(0,r.kt)("p",null,"Here is how we create classes with ",(0,r.kt)("inlineCode",{parentName:"p"},"ontouml-js"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { Project } from 'ontouml-js';\n\nconst project = new Project({ name: 'My Project' });\n\nconst model = project.createModel({ name: 'Model a.k.a. Root Package' }); \n\n// Classes that providing identity principles for their instances\nconst person = model.createKind('Person');\nconst fleet = model.createCollective('Fleet');\nconst sand = model.createQuantity('Sand');\nconst marriage = model.createRelator('Marriage');\nconst intention = model.createMode('Intention');\n\n// Classes that don\u2019t provide identity principle for their instances, but they all share a common one\nconst musician = model.createRole('Musician');\nconst broken = model.createPhase('Broken');\nconst bulldog = model.createSubkind('Bulldog');\n\n// Classes that don\u2019t provide identity and their instances follow different identity principles\nconst agent = model.createCategory('Agent');\nconst insurable = model.createMixin('Insurable');\nconst customer = model.createRoleMixin('Customer');\n")))}u.isMDXComponent=!0}}]);