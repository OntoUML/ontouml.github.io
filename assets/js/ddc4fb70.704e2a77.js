"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[83],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=s(n),f=i,h=d["".concat(p,".").concat(f)]||d[f]||c[f]||r;return n?a.createElement(h,o(o({ref:t},m),{},{components:n})):a.createElement(h,o({ref:t},m))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=f;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},5573:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:1},o="Overview",l={unversionedId:"meta/overview",id:"meta/overview",title:"Overview",description:"Through the OntoUML Metamodel, the OntoUML should be seen as a FAIR language by design, which means that it incorporates into the metamodel the principles of Findability, Interoperability, Accessibility, and Reusability, all relevant principles for ontologies as artifacts in special in a web context.",source:"@site/docs/meta/overview.md",sourceDirName:"meta",slug:"/meta/overview",permalink:"/docs/meta/overview",draft:!1,editUrl:"https://github.com/OntoUML/ontouml.github.io/docs/meta/overview.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"meta",next:{title:"Definitions",permalink:"/docs/meta/definitions"}},p={},s=[{value:"Abstract Syntax",id:"abstract-syntax",level:2},{value:"Concrete Syntax",id:"concrete-syntax",level:2}],m={toc:s},d="wrapper";function c(e){let{components:t,...r}=e;return(0,i.kt)(d,(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"overview"},"Overview"),(0,i.kt)("p",null,"Through the OntoUML Metamodel, the OntoUML should be seen as a ",(0,i.kt)("a",{parentName:"p",href:"https://www.go-fair.org/fair-principles/"},"FAIR")," language by design, which means that it incorporates into the metamodel the principles of ",(0,i.kt)("strong",{parentName:"p"},"F"),"indability, ",(0,i.kt)("strong",{parentName:"p"},"I"),"nteroperability, ",(0,i.kt)("strong",{parentName:"p"},"A"),"ccessibility, and ",(0,i.kt)("strong",{parentName:"p"},"R"),"eusability, all relevant principles for ontologies as artifacts in special in a web context."),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(8813).Z,width:"1365",height:"861"})),(0,i.kt)("p",null,"In OntoUML, all elements that bear an identifier instantiate ",(0,i.kt)("a",{parentName:"p",href:"./../definitions#OntoumlElement"},(0,i.kt)("inlineCode",{parentName:"a"},"OntoumlElement")),". Besides an ",(0,i.kt)("inlineCode",{parentName:"p"},"id"),", these elements also have the properties ",(0,i.kt)("inlineCode",{parentName:"p"},"created")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"modified")," of type date. All elements within a single ontology are aggregated in  ",(0,i.kt)("a",{parentName:"p",href:"./../definitions#Project"},(0,i.kt)("inlineCode",{parentName:"a"},"Project"))," element (except for projects themselves). Moreover, every instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"OntoumlElement")," can be organized as part of either the abstract syntax (i.e., ",(0,i.kt)("a",{parentName:"p",href:"./../definitions#ModelElement"},(0,i.kt)("inlineCode",{parentName:"a"},"ModelElement")),") or the concrete syntax (i.e., ",(0,i.kt)("a",{parentName:"p",href:"./../definitions#Diagram"},(0,i.kt)("inlineCode",{parentName:"a"},"Diagram")),", ",(0,i.kt)("a",{parentName:"p",href:"./../definitions#View"},(0,i.kt)("inlineCode",{parentName:"a"},"View")),", or ",(0,i.kt)("a",{parentName:"p",href:"./../definitions#Shape"},(0,i.kt)("inlineCode",{parentName:"a"},"Shape")),") of the language."),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(4426).Z,width:"2121",height:"1059"})),(0,i.kt)("p",null,"In addition to an identifier, instances of ",(0,i.kt)("a",{parentName:"p",href:"./../definitions#NamedElement"},(0,i.kt)("inlineCode",{parentName:"a"},"NamedElement"))," (i.e., diagrams, model elements, and projects) can also have descriptive information like ",(0,i.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"alternativeNames"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"description"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"editorialNotes"),", all of which are multilingual properties of type ",(0,i.kt)("a",{parentName:"p",href:"./../definitions#LanguageString"},(0,i.kt)("inlineCode",{parentName:"a"},"LanguageString")),". The datatype ",(0,i.kt)("a",{parentName:"p",href:"./../definitions#Resource"},(0,i.kt)("inlineCode",{parentName:"a"},"Resource"))," is used whenever a reference to an external resource is necessary, either through a ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," or a ",(0,i.kt)("inlineCode",{parentName:"p"},"URI"),". This is the case for the properties ",(0,i.kt)("inlineCode",{parentName:"p"},"creators")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"contributors"),", for instance."),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(7279).Z,width:"2358",height:"1677"})),(0,i.kt)("p",null,"Instances of ",(0,i.kt)("a",{parentName:"p",href:"./../definitions#Project"},(0,i.kt)("inlineCode",{parentName:"a"},"Project"))," not only aggregate the entire ontology (i.e., the elements of both concrete and abstract syntaxes), they also have the metadata relevant for the entire ontology (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"theme")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"publisher"),"). The ",(0,i.kt)("inlineCode",{parentName:"p"},"namespace")," property also support the definition of a prefix for the IDs of all other elements that are not already formed as a URI."),(0,i.kt)("h2",{id:"abstract-syntax"},"Abstract Syntax"),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(20).Z,width:"2304",height:"1644"})),(0,i.kt)("p",null,"All elements that have are explicitly represented in an OntoUML diagram specialize ",(0,i.kt)("a",{parentName:"p",href:"./../definitions#ModelElement"},(0,i.kt)("inlineCode",{parentName:"a"},"ModelElement")),": ",(0,i.kt)("inlineCode",{parentName:"p"},"Package"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Class"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"BinaryRelation"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"NaryRelation"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Property"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Literal"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Generalization"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"GeneralizationSet"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Note"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Link"),". This representation is done through specific type of ",(0,i.kt)("inlineCode",{parentName:"p"},"View")," for each type of ",(0,i.kt)("inlineCode",{parentName:"p"},"ModelElement"),". In addition, a ",(0,i.kt)("inlineCode",{parentName:"p"},"ModelElement")," can also be the ",(0,i.kt)("inlineCode",{parentName:"p"},"owner")," of a ",(0,i.kt)("inlineCode",{parentName:"p"},"Diagram"),"."),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(8520).Z,width:"2766",height:"2310"})),(0,i.kt)("h2",{id:"concrete-syntax"},"Concrete Syntax"))}c.isMDXComponent=!0},8520:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Element Diagram - Class-2ea23d5474a00ad5f6410a60f6e9a0a1.png"},20:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Element Diagram - ModelElement-4bd18861060b9eaf32f45ef4c01841cd.png"},4426:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Element Diagram - NamedElement-40c770a91c6a019a7a2a149f61f27e88.png"},8813:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Element Diagram - OntoumlElement-661e4f5c196060d7d1ae7afd67ddfbd3.png"},7279:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Element Diagram - Project-844edeb8f38751644c1c3428b0627bd1.png"}}]);